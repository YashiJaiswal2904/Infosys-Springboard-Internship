Ques:1
Assume that you are compiling a list of mathematical constants, and you decide to represent all of them in a Python list, following this structure:
maths_constants = [['name of constant', 'numeric value'],
                   ['name of constant', 'numeric value'],
                   ['name of constant', 'numeric value'],
                   ...
                ]
As exemplified in the list maths_constants. However, upon review, you realize that you missed the value of Pi.
Let's address this by first identifying its prospective index if it were included in the list, considering the alternating pattern of string constants and their numeric values.
Store the index in the variable index_pi.
Ans:
  index_pi = maths_constants.index(['Pi'])
  The method .index will search for the item Pi in our list and provide its index.


Ques:2
As you have found the index of the Pi, now you have to insert the value after the name Pi in the list.
Your final complete list of mathematical constants including the value of Pi should be in the variable maths_constants.
Input the value of Pi as 3.1416(in float)
Ans:  
  We have calculated the index of the Pi in the previous activity. Now we will use the method .insert() to insert the value of the Pi in the list.
  maths_constants[index_pi].insert(1, 3.1416)
  Here we have used the method .insert() to insert the value of the Pi in the list. 
  The method .insert() takes two arguments, the first argument is the index where we want to insert the value and the second argument is the value we want to insert.


Ques:3
Add all the characters of our even_string to the end of our list odd_list.
[!] Important:
Do Not Use Loops and if else statements.
Add each character of the string, not the whole string.
After extending, the final result will be: [99, 101, 103, 105, 107, 109, '2', '4', '6', '8', '9']
Ans:
  odd_list.extend(even_string)
  odd_list
  The .extend method takes an iterable (another list, tuple, string, set) and adds its individual elements to the list on which it is applied. 
  So, in our solution, the odd_list is extended with each character from the even_string string.


Ques:4
As our odd_list = [99, 101, 103, 105, 107, 109, '2', '4', '6', '8', '9'], we need to remove '9'.
Ans:
  odd_list.pop()
  The .pop() method removes the last element from the list. If you want to remove any other element, you can pass the index of the element as an argument to the method.
  Another solution, you can also use the del keyword to remove the element from the list.
  del odd_list[-1]
  You can also use the slicing method to remove the last element from the list.
  odd_list = odd_list[:-1]


Ques:5
The composition of our dataset student_list:
[['name', 'student_id', 'age','grade','subject'],
['name', 'student_id', 'age','grade','subject'],
[...],...]
Ans:
  print(f"The total number of students in the dataset is: {len(student_list)}")


Ques:6
Your task is to identify the name of the 400th student in our dataset. Each element in the dataset is a list of five items:
[
['name', 'student_id', 'age', 'grade', 'subject'],
['name', 'student_id', 'age', 'grade', 'subject'],
... among others...
]
Example of input: Alex
Ans:
  As each element in our dataset is a list of 5 items i.e:
  [['name', 'student_id', 'age','grade','subject'],
  ['name', 'student_id', 'age','grade','subject'],
  [...],...]
  The name will be at the 0th index of the 400th item. Moreover, as indices start from 0 so, the 400th item will be at the 399th index.
  student_list[399][0]
  The correct answer is Lucas.


Ques:7
Select the correct age and subject of our student at the 273rd index.
o Age: 19
o Age: 18
o Subject: History
o Subject: Science
Ans:
  As each element in our dataset is a list of 5 items i.e:
  [['name', 'student_id', 'age','grade','subject'],
  ['name', 'student_id', 'age','grade','subject'],
  [...],...]
  Age will be at 1st index of 273rd item. Favorite Subject will be at the 4th index.
  age = student_list[273][2]
  subject = student_list[273][4]
  print(f"Age: {age} & subject: {subject}") 


Ques:8
Create a list select_student from the original list(student_list), starting at index 98 up to, but not including, index 214.
Make sure to not change the order of the students.
Ans:
  select_student = student_list[98:214]
  select_student
  List slicing from the index 98 to 214 and we will then store these items in the variable select_student


Ques:9
From the previous activity, we have the list select_student which contains the students from the index 98 to 214. Now we need to find the name, age, grade, subject of the last student from our select_student list
Store the values in the variables name, age, grade, and subject respectively.
Ans:
  The last element of a list can be accessed either using -1 as an index or len(list)-1.
  After we get the last index of the list select_student we will index for the name, age, grade, and favorite subject accordingly...
  name = select_student[-1][0]
  age = select_student[-1][2]
  grade = select_student[-1][3]
  subject = select_student[-1][4]
  print(f"name: {name} age: {age} grade: {grade} & subject: {subject}")


Ques:10
Convert the ages into int as currently they are type str (string).
Loop through the list student_list, access the age, cast it to int, and append it to the new list variable students_age.
Ans:
  students_age = []
  for student in student_list:
      student_age = int(student[2])
      students_age.append(student_age)
  students_age


Ques:11
Use the list students_age created in the previous activity and find the average age of the students.
Average/mean Age is defined as the sum of the age of all the students divided by the number of students.
Ans:
  average_age = sum(students_age)/len(students_age)
  average_age


Ques:12
Iterate through the list student_list and check for each of these subjects, incrementing each time the variable for the corresponding subject and 
store the result in the variables history_lovers, english_lovers and maths_lovers respectively.
We assume that in the list student_list, any particular student can have multiple subjects and also have multiple grades in the same subject. Hence, we count that student only once.
For example, if a student has History as one of the subjects and has an A grade in History as well as a B grade in History, we count that student only once.
Ans:
  history_lovers_student = []
  english_lovers_student = []
  maths_lovers_student = []
  for student in student_list:
      if "History" in student[4]:
          if student[0] not in history_lovers_student:
              history_lovers_student.append(student[0])
      if "English" in student[4]:
          if student[0] not in english_lovers_student:
              english_lovers_student.append(student[0])
      if "Math" in student[4]:
          if student[0] not in maths_lovers_student:
              maths_lovers_student.append(student[0])
  history_lovers = len(history_lovers_student)
  english_lovers = len(english_lovers_student)
  maths_lovers = len(maths_lovers_student)
  print(f"History lovers: {history_lovers}")
  print(f"English lovers: {english_lovers}")
  print(f"Maths lovers: {maths_lovers}")
  In this solution, we have created three lists history_lovers_student, english_lovers_student and maths_lovers_student to store the names of the students who love the respective subjects.
  We have used these lists to make sure that we count each student only once.


Ques:13
Create two lists a_graders and b_graders with the name, age, grade, and favorite subject of the students. Put students with A grades to the list a_graders and students with B graders to the list b_graders
Expected output for a_graders:
[['Luna', '18', 'A', 'English'],
 ['Anthony', '18', 'A', 'Math'],
 ['Bella', '17', 'A', 'History'],
 ['Lucy', '17', 'A', 'History'],
 ['Brooklyn', '18', 'A', 'History'],
 ['Ava', '18', 'A', 'Art'],
 ['Riley', '17', 'A', 'Math'],
 ...
]
Ans:
  a_graders = []
  b_graders = []
  for student in student_list:
      if student[3]=='A':
          student_name = student[0]
          student_age = student[2]
          student_grade = student[3]
          student_subject = student[4]
          a_graders.append([student_name,student_age,student_grade,student_subject])
      if student[3]=='B':
          student_name = student[0]
          student_age = student[2]
          student_grade = student[3]
          student_subject = student[4]
          b_graders.append([student_name,student_age,student_grade, student_subject])
  print(f"len a {len(a_graders)}, len b: {len(b_graders)}")


Ques:14
Find the grade of the student with the name Isaac and age 16 and subject Science.
Enter your answer in the input box below.
Ans:
  for student in student_list:
    if student[0] == 'Isaac' and student[2] == '16' and student[4] == 'Science':
        print(student[3])


Ques:15
How many students are there whose name starts with the letter S in the list student_list?
There are multiple students with the same name in the list student_list. You should count each student only once. Use student id to identify different students.
o 33
o 38
o 73
o 37
Ans:
  students_with_s = []
  for student in student_list:
      if student[0][0] == 'S':
          students_with_s.append(student)
  unique_students_with_s = []
  for student in students_with_s:
      if student not in unique_students_with_s:
          unique_students_with_s.append(student)
  print(len(unique_students_with_s))


Ques:16
How many students are under 17 in the list student_list?
There are multiple students with the same name in the list student_list. You should count each student only once. Use student id to identify different students.
o 99
o 154
o 30
o 145
Ans:
  students_under_17 = []
  for student in student_list:
      if int(student[2]) < 17:
          students_under_17.append(student)
  unique_students_under_17 = set() 
  for student in students_under_17:
      unique_students_under_17.add(student[1])
  len(unique_students_under_17)


Ques:17
What is the minimum & maximum age of the students
Input Example: Min: 20, Max: 29.
Ans:
  min_age = min(students_age)
  max_age = max(students_age)
  print(f"Min: {min_age}, Max: {max_age}")
  In the above code, we are using the min() and max() functions to find the minimum and maximum age of the students. We have used the students_age list which we created in the previous activity.


Ques:18
Remove the student whose name is Luna, age is 18, grade is E and subject is Geography from the list student_list. If there are multiple students with the same name, age, grade, and subject, remove all of them.
Ans:
  As student_list contains the student id also but we have only the name, age, grade and subject of the student, we will create a new list which contain all the students with these details.
  We will then remove the students from the student_list using the remove() function.
  student_to_remove = ['Luna', '18', 'E', 'Geography']
  students_to_remove = []
  for student in student_list:
      if student[0] == student_to_remove[0] and student[2] == student_to_remove[1] and student[3] == student_to_remove[2] and student[4] == student_to_remove[3]:
          students_to_remove.append(student)
  print(students_to_remove)
  for student in students_to_remove:
      student_list.remove(student)


Ques:19
Count the number of occurrences of the student whose name is Luna and age is 16 in the list student_list. If there are multiple students with the same name and age, count all of them.
Ans:
  student_to_count = ['Luna', '16']
  count = 0   
  for student in student_list:
      if student[0] == student_to_count[0] and student[2] == student_to_count[1]:
          count += 1
  print(count)
