Ques:1
Suppose you have a list of dictionaries, where each dictionary represents a customer's data. Each dictionary has the following keys: name, age, orders. The orders key contains a list of order IDs.
customer_data = [
    {'name': 'Alice', 'age': 30, 'orders': [101, 103, 105]},
    {'name': 'Bob', 'age': 25, 'orders': [102, 104]},
    {'name': 'Charlie', 'age': 28, 'orders': [106]}
]
Write a function get_total_orders(customer_list) that takes the customer_data list as a parameter and returns the total number of orders across all customers.
You have to write the function in the input box below.
Ans:
  def get_total_orders(customer_list):
    total_orders = 0
    for customer in customer_list:
        total_orders += len(customer['orders'])
    return total_orders


Ques:2
A compilation of temperature readings over a week is provided. Each temperature corresponds to a specific day.
temperature_data = [72, 75, 68, 70, 74, 79, 81]
days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
Expected result looks like below:
temperature_dict = {
    'Monday': 72,
    'Tuesday': 75,
    'Wednesday': 68,
    'Thursday': 70,
    'Friday': 74,
    'Saturday': 79,
    'Sunday': 81
}
Select the appropriate option that generates a dictionary named temperature_dict, associating each day with its respective temperature.
o temperature_dict = {}
  for i in range(len(days)):
      temperature_dict[days[i]] = temperature_data[i]
o temperature_dict = {}
  for i in range(len(temperature_data)):
      temperature_dict[temperature_data[i]] = days[i]
o temperature_dict = {}
  for day, temp in zip(days, temperature_data):
      temperature_dict[day] = temp
o temperature_dict = {}
  for temp, day in zip(temperature_data, days):
      temperature_dict[temp] = day
Ans:
  temperature_dict = {}
  for day, temp in zip(days, temperature_data):
      temperature_dict[day] = temp


Ques:3
The inventory of a grocery store is being managed. Each product is represented as a dictionary containing keys product_id, name, quantity, and price.
inventory = [
    {'product_id': 101, 'name': 'Apple', 'quantity': 50, 'price': 0.5},
    {'product_id': 102, 'name': 'Banana', 'quantity': 30, 'price': 0.3},
    {'product_id': 103, 'name': 'Orange', 'quantity': 40, 'price': 0.4}
]
Craft a function named calculate_total_revenue(inventory) that computes the overall revenue generated by the products in the inventory.
Ans:
  def calculate_total_revenue(inventory):
    total_revenue = 0
    for item in inventory:
        total_revenue += item['quantity'] * item['price']
    return total_revenue


Ques:4
Information regarding user interaction with posts on a social media platform is available. Each post is represented as a dictionary containing post_id, likes, comments, and shares
post_data = [
    {'post_id': 101, 'likes': 50, 'comments': 12, 'shares': 5},
    {'post_id': 102, 'likes': 75, 'comments': 8, 'shares': 10},
    {'post_id': 103, 'likes': 30, 'comments': 5, 'shares': 2}
]
Opt for the accurate function calculate_engagement_rate(posts) that evaluates the mean engagement rate across all posts. 
The engagement rate is defined as the total sum of likes, comments, and shares divided by the total number of posts.
o def calculate_engagement_rate(posts):
    total_engagement = sum(post['likes'] + post['comments'] + post['shares'] for post in posts)
    avg_engagement_rate = total_engagement / sum(2 for _ in posts)
    return avg_engagement_rate
o def calculate_engagement_rate(posts):
    total_engagement = sum(post['likes'] + post['comments'] + post['shares'] for post in posts)
    avg_engagement_rate = total_engagement // len(posts)
    return avg_engagement_rate
o def calculate_engagement_rate(posts):
    total_engagement = sum(post['likes'] + post['comments'] + post['shares'] for post in posts)
    avg_engagement_rate = total_engagement / len(posts)
    return avg_engagement_rate
o def calculate_engagement_rate(posts):
    total_engagement = sum(post['likes'] + post['comments'] + post['shares'] for post in posts)
    avg_engagement_rate = total_engagement / sum(posts)
    return avg_engagement_rate
Ans:
  def calculate_engagement_rate(posts):
    total_engagement = sum(post['likes'] + post['comments'] + post['shares'] for post in posts)
    avg_engagement_rate = total_engagement / len(posts)
    return avg_engagement_rate


Ques:5
The task involves overseeing student course enrollments. Each student's information is captured using a dictionary with student_id, name, and courses attributes. The courses attribute contains a set of course IDs.
students = [
    {'student_id': 1, 'name': 'Alice', 'courses': {101, 103, 105}},
    {'student_id': 2, 'name': 'Bob', 'courses': {102, 104}},
    {'student_id': 3, 'name': 'Charlie', 'courses': {106}}
]
Indicate the appropriate choice for a function find_common_courses(students) that produces a set of course IDs in which at least two students are enrolled.
o def find_common_courses(students):
    course_counter = {}
    for student in students:
        for course in student['courses']:
            course_counter[course] = course_counter.get(course, 0) + 1
    common_courses = {course for course, count in course_counter.items() if count >= 2}
    return common_courses
o def find_common_courses(students):
    common_courses = set()
    for course in students[0]['courses']:
        is_common = True
        for student in students[1:]:
            if course not in student['courses']:
                is_common = False
                break
        if is_common:
            common_courses.add(course)
    return common_courses
o def find_common_courses(students):
    common_courses = set()
    for student in students:
        common_courses = common_courses.union(student['courses'])
    return common_courses
o def find_common_courses(students):
    common_courses = set()
    for student in students:
        common_courses.intersection_update(student['courses'])
    return common_courses
Ans:
  def find_common_courses(students):
    course_counter = {}
    for student in students:
        for course in student['courses']:
            course_counter[course] = course_counter.get(course, 0) + 1
    common_courses = {course for course, count in course_counter.items() if count >= 2}
    return common_courses


Ques:6
The objective is to assess a list of data entries and identify any duplications.
data_entries = ['apple', 'banana', 'orange', 'apple', 'grape', 'banana']
Select the appropriate options that effectively eliminate duplicate entries from the data_entries list.
o unique_entries = list(tuple(data_entries))
o unique_entries = list(set(data_entries))
o unique_entries = []
  for entry in data_entries:
      if entry not in unique_entries:
          unique_entries.append(entry)
o unique_entries = []
  for i in range(len(data_entries)):
      if data_entries[i] not in data_entries[:i]:
          unique_entries.append(data_entries[i])
Ans:
  unique_entries = []
  for entry in data_entries:
      if entry not in unique_entries:
          unique_entries.append(entry) 
             and
  unique_entries = list(set(data_entries))
              and
  unique_entries = []
  for i in range(len(data_entries)):
      if data_entries[i] not in data_entries[:i]:
          unique_entries.append(data_entries[i])


Ques:7
A compilation of student names and their respective exam scores is provided.
students = ['Alice', 'Bob', 'Charlie', 'David']
scores = [85, 92, 78, 95]
Choose the accurate options that lead to the creation of a dictionary in which student names function as keys and exam scores function as values.
o score_dict = {}
  for i in range(len(students)):
      score_dict[students[i]] = scores[i]
o score_dict = dict(zip(students, scores[0]))
o score_dict = {}
  for i, student in enumerate(students):
      score_dict[student] = scores[i]
o score_dict = {}
  for i, student in enumerate(students):
      score_dict[student] = list(scores[i])
Ans:
  score_dict = {}
  for i in range(len(students)):
      score_dict[students[i]] = scores[i]
              and
  score_dict = {}
  for i, student in enumerate(students):
      score_dict[student] = scores[i]


Ques:8
A roster of employee names and their respective departments is available. The objective is to calculate the employee count within each department.
employees = ['Alice', 'Bob', 'Charlie', 'David', 'Eva']
departments = ['HR', 'Finance', 'IT', 'IT', 'HR']
Select the accurate options that lead to the creation of a dictionary where departments function as keys and the count of employees in each department serves as the value.
o department_count = {}
  for i in range(len(employees)):
      department = departments[i]
      if department in department_count:
          department_count[department] += 1
      else:
          department_count[department] = 1
o department_count = {}
  for i in range(len(employees)):
      department_count[departments[i]] = department_count.get(departments[i], 1) + 1
o department_count = {}
  for i in range(len(employees)):
      department_count[departments[i]] = department_count.get(departments[i], 0) + 1
o department_count = {}
  for department in departments:
      if department not in department_count:
          department_count[department] = 1
      else:
          department_count[department] += 1
Ans:
  department_count = {}
  for i in range(len(employees)):
      department = departments[i]
      if department in department_count:
          department_count[department] += 1
      else:
          department_count[department] = 1
              and
  department_count = {}
  for department in departments:
      if department not in department_count:
          department_count[department] = 1
      else:
          department_count[department] += 1
              and
  department_count = {}
  for i in range(len(employees)):
      department_count[departments[i]] = department_count.get(departments[i], 0) + 1


Ques:9
A collection of items within a shopping cart and their associated prices is at your disposal.
items = ['Apple', 'Banana', 'Orange']
prices = [1.0, 0.5, 0.75]
quantities = [3, 2, 4]
Choose the accurate options that perform calculations resulting in the determination of the total cost of the items present in the shopping cart.
o total_cost = 0
  for price, quantity in zip(prices, quantities):
      total_cost += price * quantity
o total_cost = 0
  for i in range(len(items)):
      total_cost += prices[i] * quantities[i]
o total_cost = sum(prices * quantities)
o total_cost = sum(prices[i] * quantities[i] for i in range(len(items)))
Ans:
  total_cost = 0
  for i in range(len(items)):
      total_cost += prices[i] * quantities[i]
              and
  total_cost = sum(prices[i] * quantities[i] for i in range(len(items)))
                and
  total_cost = 0
  for price, quantity in zip(prices, quantities):
      total_cost += price * quantity


Ques:10
You are analyzing the frequency of words in a text document. You have a list of words.
words = ['hello', 'world', 'hello', 'python', 'world']
Select all correct option that create a dictionary where words are keys and their frequencies are values.
o word_frequency = {}
  for i in range(len(words)):
      word_frequency[words[i]] = word_frequency.get(words[i], 1) + 1
o word_frequency = {}
  for word in words:
      if word in word_frequency:
          word_frequency[word] += 1
      else:
          word_frequency[word] = 1
o word_frequency = {}
  for word in words:
      word_frequency[word] = word_frequency.get(word, 0) + 1
o word_frequency = {}
  for i in range(len(words)):
      if words[i] in word_frequency:
          word_frequency[words[i]] += 1
      else:
          word_frequency[words[i]] = 1
Ans:
  word_frequency = {}
  for word in words:
      if word in word_frequency:
          word_frequency[word] += 1
      else:
          word_frequency[word] = 1
            and
  word_frequency = {}
  for i in range(len(words)):
      if words[i] in word_frequency:
          word_frequency[words[i]] += 1
      else:
          word_frequency[words[i]] = 1
            and
  word_frequency = {}
  for word in words:
      word_frequency[word] = word_frequency.get(word, 0) + 1


Ques:11
You have a matrix represented as a list of lists, and you want to transpose it.
matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]
Choose all the correct option which transpose the given matrix.
o transposed_matrix = []
  for i in range(len(matrix[0])):
      transposed_row = []
      for row in matrix:
          transposed_row.append(row[i])
      transposed_matrix.append(transposed_row)
o transposed_matrix = []
  for i in range(len(matrix[0])):
      transposed_row = []
      for j in range(len(matrix)):
          transposed_row.append(matrix[i][j])
      transposed_matrix.append(transposed_row)
o transposed_matrix = []
  for i in range(len(matrix[0])):
      transposed_row = []
      for j in range(len(matrix)):
          transposed_row.append(matrix[j][i])
      transposed_matrix.append(transposed_row)
o transposed_matrix = []
  for i in range(len(matrix[0])):
      transposed_row = [row[i] for row in matrix]
      transposed_matrix.append(transposed_row)
Ans:
  transposed_matrix = []
  for i in range(len(matrix[0])):
      transposed_row = []
      for row in matrix:
          transposed_row.append(row[i])
      transposed_matrix.append(transposed_row)
                and
  transposed_matrix = []
  for i in range(len(matrix[0])):
      transposed_row = [row[i] for row in matrix]
      transposed_matrix.append(transposed_row)
                and
  transposed_matrix = []
  for i in range(len(matrix[0])):
      transposed_row = []
      for j in range(len(matrix)):
          transposed_row.append(matrix[j][i])
      transposed_matrix.append(transposed_row)


Ques:12
A nested dictionary is employed to capture student information, encompassing name, age, and grades.
students = {
    'Alice': {'age': 20, 'grades': [85, 92, 78]},
    'Bob': {'age': 21, 'grades': [92, 88, 90]},
    'Charlie': {'age': 19, 'grades': [78, 80, 75]},
    'Chaplien': {'age': 34, 'grades': [90, 90, 90]}
}
Choose the appropriate options that execute the computation of the average grade for each student and subsequently organize this data within a new dictionary.
The resultant structure is as follows:
o average_grades = {
    'Alice': 85.0,
    'Bob': 90.0,
    'Charlie': 77.66666666666667,
    'Chaplien': 90.0
  }
o average_grades = {}
  for student, info in students.items():
      total_grades = 0
      for grade in info['grades']:
          total_grades += grade
      average_grades[student] = total_grades / len(students)
o average_grades = {}
  for student, info in students.items():
      total_grades = 0
      for grade in info['grades']:
          total_grades += grade
      average_grades[student] = total_grades / len(info['grades'])
o average_grades = {}
  for student in students:
      info = students[student]
      grades_sum = sum(info['grades'])
      average_grades[student] = grades_sum / len(info['grades'])
o average_grades = {}
  for student, info in students.items():
      grades_sum = sum(info['grades'])
      average_grades[student] = grades_sum / len(info['grades'])
Ans:
  average_grades = {}
  for student, info in students.items():
      grades_sum = sum(info['grades'])
      average_grades[student] = grades_sum / len(info['grades'])
                and
  average_grades = {}
  for student in students:
      info = students[student]
      grades_sum = sum(info['grades'])
      average_grades[student] = grades_sum / len(info['grades'])
                and
  average_grades = {}
  for student, info in students.items():
      total_grades = 0
      for grade in info['grades']:
          total_grades += grade
      average_grades[student] = total_grades / len(info['grades'])


Ques:13
You're a Data Scientist at Slack, and your task is to process messages for conversations between users. The messages are given in the format of a list of dictionaries.
messages = [
    {'from': 'santiago', 'to': 'anurag', 'message': 'Hello world', 'is_read': False},
    {'from': 'martin', 'to': 'santiago', 'message': 'How are you', 'is_read': False},
    {'from': 'santiago', 'to': 'anurag', 'message': 'Good Morning', 'is_read': False},
    {'from': 'santiago', 'to': 'anurag', 'message': 'How are you', 'is_read': True},
    {'from': 'anurag', 'to': 'santiago', 'message': "I'm fine", 'is_read': False},
    {'from': 'anurag', 'to': 'martin', 'message': "How are you", 'is_read': False}
    # ...
]
Your goal is to generate a summary for each user that includes the total number of messages and the number of unread messages they have received. Which code correctly generates the desired summary?
The generated summary looks like below:
user_summary = {'anurag': {'total_messages': 3, 'unread': 2},
 'santiago': {'total_messages': 2, 'unread': 2},
 'martin': {'total_messages': 1, 'unread': 1}}
o user_summary = {}
  for message in messages:
      receiver = message['to']
      if receiver not in user_summary:
          user_summary[receiver] = {'total_messages': 0, 'unread': 0}
      user_summary[receiver]['total_messages'] += 1
      if not message['is_read']:
          user_summary[receiver]['unread'] += 1
o user_summary = {}
  for message in messages:
      user = message['from']
      if user not in user_summary:
          user_summary[user] = {'total_messages': 1, 'unread': 1}
      else:
          user_summary[user]['total_messages'] += 1
          if not message['is_read']:
              user_summary[user]['unread'] += 1
o user_summary = {}
  for message in messages:
      user = message['from']
      user_summary.setdefault(user, {'total_messages': 0, 'unread': 0})
      if not message['is_read']:
          user_summary[user]['unread'] += 1
      user_summary[user]['total_messages'] += 1
o user_summary = {}
  for message in messages:
      user = message['to']
      if user in user_summary:
          user_summary[user]['total_messages'] += 1
          if not message['is_read']:
              user_summary[user]['unread'] += 1
      else:
          user_summary[user] = {'total_messages': 1, 'unread': 1}
          if not message['is_read']:
              user_summary[user]['unread'] += 1
Ans:
  user_summary = {}
  for message in messages:
      receiver = message['to']
      if receiver not in user_summary:
          user_summary[receiver] = {'total_messages': 0, 'unread': 0}
      user_summary[receiver]['total_messages'] += 1
      if not message['is_read']:
          user_summary[receiver]['unread'] += 1


Ques:14
You are working on a payroll system to calculate employee salaries. Each employee's information is represented as a dictionary with employee_id, name, hours_worked, and hourly_rate keys.
employees = [
    {'employee_id': 101, 'name': 'Alice', 'hours_worked': 40, 'hourly_rate': 20},
    {'employee_id': 102, 'name': 'Bob', 'hours_worked': 35, 'hourly_rate': 18},
    {'employee_id': 103, 'name': 'Charlie', 'hours_worked': 45, 'hourly_rate': 22}
]
Complete the below solution to calculate the correct salaries of each employee.
salaries = {}
for employee in employees:
    employee_id = employee['employee_id']
    salary = ... # Calculate correct salary
    salaries[employee_id] = salary
Calculated salaries look like below:
salaries = {
    101: 800,
    102: 630,
    103: 990
}
Ans:
  salaries = {}
  for employee in employees:
      employee_id = employee['employee_id']
      salary = employee['hours_worked'] * employee['hourly_rate']
      salaries[employee_id] = salary


Ques:15
You are tracking the progress of tasks in a project. Each task's information is represented as a dictionary with task_id, description, status, and completed_percent keys.
tasks = [
    {'task_id': 1, 'description': 'Design', 'status': 'In Progress', 'completed_percent': 30},
    {'task_id': 2, 'description': 'Development', 'status': 'In Progress', 'completed_percent': 50},
    {'task_id': 3, 'description': 'Testing', 'status': 'Completed', 'completed_percent': 100}
]
Identify and correct the mistake in the provided below solution to properly identify incomplete tasks that are in progress.
incomplete_tasks = []
for task in tasks:
    if task['status'] == 'In Progress' and task['completed_percent'] >= 100:
        incomplete_tasks.append(task['description'])
Ans:
  incomplete_tasks = []
  for task in tasks:
      if task['status'] == 'In Progress' and task['completed_percent'] < 100:
          incomplete_tasks.append(task['description'])
  In the provided solution, the condition to identify incomplete tasks should use < 100 instead of >= 100 to account for tasks that are still in progress but not fully completed.


Ques:16
You are analyzing user activity data for a social media platform. Each user's activity is represented as a dictionary with user_id, posts, likes, and comments keys.
user_activity = [
    {'user_id': 101, 'posts': 5, 'likes': 20, 'comments': 10},
    {'user_id': 102, 'posts': 3, 'likes': 15, 'comments': 5},
    {'user_id': 103, 'posts': 8, 'likes': 25, 'comments': 15}
]
Write code to calculate the total engagement (likes + comments) for each user and store it in a new dictionary named user_engagement.
Output look like below:
user_engagement = {
    101: 30,
    102: 20,
    103: 40
}
Ans:
  user_engagement = {}
  for user in user_activity:
      user_engagement[user['user_id']] = user['likes'] + user['comments']


Ques:17
You are building a user account management system. Each user's account information is represented as a dictionary with user_id, username, email, and is_active keys.
user_accounts = [
    {'user_id': 101, 'username': 'alice123', 'email': 'alice@example.com', 'is_active': True},
    {'user_id': 102, 'username': 'bob456', 'email': 'bob@example.com', 'is_active': False},
    {'user_id': 103, 'username': 'charlie789', 'email': 'charlie@example.com', 'is_active': True}
]
Choose correct option that create a list of usernames for active users.
The expected list looks like below:
active_usernames = ['alice123', 'charlie789']
o active_usernames = []
  for user in user_accounts:
      if not user['is_active']:
          active_usernames.append(user['username'])
  active_usernames
o active_usernames = []
  for user in user_accounts:
      if user['is_active']:
          active_usernames.append(user['username'])
o active_usernames = []
  for i in range(len(user_accounts)):
      if user_accounts[i]['is_active']:
          active_usernames.append(user_accounts[i]['username'])
o active_usernames = [user['username'] for user in user_accounts if user['is_active']]
Ans:
  active_usernames = []
  for user in user_accounts:
      if user['is_active']:
          active_usernames.append(user['username'])
                and
  active_usernames = [user['username'] for user in user_accounts if user['is_active']]
                and
  active_usernames = []
  for i in range(len(user_accounts)):
      if user_accounts[i]['is_active']:
          active_usernames.append(user_accounts[i]['username'])


Ques:18
You are managing a product inventory for an online store. Each product's information is represented as a dictionary with product_id, name, price, and quantity keys.
products = [
    {'product_id': 1, 'name': 'Laptop', 'price': 1000, 'quantity': 10},
    {'product_id': 2, 'name': 'Phone', 'price': 800, 'quantity': 15},
    {'product_id': 3, 'name': 'Tablet', 'price': 400, 'quantity': 20}
]
Choose correct option that calculate the total value of the inventory (sum of price * quantity for each product).
o inventory_value = 0
  for product in products:
      inventory_value += product['price']
      inventory_value *= product['quantity']
o inventory_value = 0
  for product in products:
      inventory_value += product['price'] * product['quantity']
o inventory_value = 0
  for i in range(len(products)):
      inventory_value += products[i]['price'] * products[i]['quantity']
o inventory_value = sum(product['price'] * product['quantity'] for product in products)
Ans:
  inventory_value = 0
  for product in products:
      inventory_value += product['price'] * product['quantity']
                and
  inventory_value = sum(product['price'] * product['quantity'] for product in products)
                and
  inventory_value = 0
  for i in range(len(products)):
      inventory_value += products[i]['price'] * products[i]['quantity']
